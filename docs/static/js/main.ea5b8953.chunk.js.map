{"version":3,"sources":["assets/pokelogo.png","components/AppBar/AppBar.js","components/Card/Card.js","components/PokeList/PokeList.js","containers/ListContainer/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppBar","className","alt","src","logo","Component","Card","props","index","data","url","split","console","log","name","PokeList","pokeData","map","pokemon","ListContainer","state","fetch","then","response","json","setState","results","catch","err","this","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,sC,2QCkB5BC,E,iLATP,OACI,yBAAKC,UAAU,SAASC,IAAI,mBACxB,yBAAKC,IAAKC,MACV,6C,GARKC,aCoBNC,G,MArBF,SAACC,GAIV,IAAIC,EAAQD,EAAME,KAAKC,IAAIC,MAAM,KAAK,GACtCC,QAAQC,IAAIN,EAAME,MAClB,IAAIC,EAAM,4EAA4EF,EAAM,OAE5F,OACI,wBAAIP,UAAU,QACV,yBAAKA,UAAU,YAGX,yBAAKE,IAAKO,EAAKR,IAAI,cAEvB,4BAAKK,EAAMO,SCMRC,G,MApBE,SAACR,GAGd,OACI,oCACI,wBAAIN,UAAU,kBAAd,sBACA,wBAAIA,UAAU,oBAENM,EAAMS,SAASC,KAAI,SAACC,EAASV,GACzB,OACQ,kBAAC,EAAD,CAAMM,KAAMI,EAAQJ,KAAML,KAAMS,WCoBjDC,G,iNA5BXC,MAAQ,CACJJ,SAAU,I,mFAGO,IAAD,OAGhBK,MAFY,sCAGPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GACF,EAAKgB,SAAS,CAAET,SAAUP,EAAKiB,aAGlCC,OAAM,SAAAC,GACHhB,QAAQC,IAAIe,Q,+BAMpB,OACI,yBAAK3B,UAAU,iBACX,kBAAC,EAAD,CAAUe,SAAUa,KAAKT,MAAMJ,gB,GAxBnBX,cCgBbyB,E,2MAdbV,MAAQ,G,wEAKN,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVUf,aCQE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.ea5b8953.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokelogo.de8a0f82.png\";","import React ,{Component} from 'react';\r\nimport './AppBar.css';\r\nimport logo from '../../assets/pokelogo.png';\r\n\r\nclass AppBar extends Component {\r\n\r\n\r\n    render () {\r\n        \r\n        return (\r\n            <div className=\"AppBar\" alt=\"LogocleaPokemon\">\r\n                <img src={logo} />\r\n                <h3>Poke App</h3>\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default AppBar;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n\r\n\r\n\r\n    let index = props.data.url.split(\"/\")[6];\r\n    console.log(props.data);\r\n    let url = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"+index+\".png\";\r\n\r\n    return (\r\n        <li className=\"Card\">\r\n            <div className=\"card_img\">\r\n\r\n\r\n                <img src={url} alt=\"pokemon-\" />\r\n            </div>\r\n            <h4>{props.name }</h4>\r\n\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card'\r\nimport './PokeList.css';\r\n\r\nconst PokeList = (props) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"PokeList_title\">Lista de Pokemones</h2>\r\n            <ul className=\"PokeList_content\">\r\n                {\r\n                    props.pokeData.map((pokemon, index) => {\r\n                        return (\r\n                                <Card name={pokemon.name} data={pokemon} />\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default PokeList;","import React, { Component } from 'react';\r\nimport PokeList from '../../components/PokeList/PokeList';\r\nimport './ListContainer.css';\r\n\r\nclass ListContainer extends Component {\r\n\r\n    state = {\r\n        pokeData: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = \"https://pokeapi.co/api/v2/pokemon/\"\r\n\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ pokeData: data.results });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ListContainer\">\r\n                <PokeList pokeData={this.state.pokeData} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListContainer;","import React, { Component } from 'react';\r\nimport AppBar from './components/AppBar/AppBar';\r\nimport ListContainer from './containers/ListContainer/ListContainer';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n   \r\n  };\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <AppBar />\r\n        <ListContainer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}